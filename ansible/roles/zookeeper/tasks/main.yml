- name: include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: set hostname.
  hostname: name={{ hostname }}
  
- name: ensure existence of installation package directory in local
  file: path={{ local_pkg_dir }} state=directory
  connection: local

- name: check for existence of zookeeper package in local
  stat:
    path: "{{ local_pkg_dir }}/{{ zk_pkg_name }}.tar.gz"
  register: zk_pkg
  connection: local
  
- name: download zookeeper package if not exists in local
  get_url: url={{ zk_pkg_url }} dest={{ local_pkg_dir }}
  when: not zk_pkg.stat.exists
  connection: local

- name: ensure existence of zookeeper installation package directory
  file: path={{ zk_install_dir }} state=directory
  
- name: unarchive zookeeper package
  unarchive: src="{{ local_pkg_dir }}/{{ zk_pkg_name }}.tar.gz" dest="{{ zk_install_dir }}/"
  
- name: copy zoo.cfg
  template: src=zoo.cfg.j2 dest="{{ zk_conf_dir }}/zoo.cfg"
  notify: restart zookeeper
  
- name: obtain zookeeper id
  shell: "line=$(grep {{ inventory_hostname }} {{ zk_conf_dir }}/zoo.cfg);tmp=${line#*.};echo ${tmp%=*}"
  register: zk_id
  
- name: ensure existence of zookeeper data directory
  file: path={{ zk_data_dir }} state=directory
  
- name: ensure existence of zookeeper data directory
  copy: content={{ zk_id.stdout }} dest="{{ zk_data_dir }}/myid"
# copy: content={{ item.0 }} dest="{{ zk_data_dir }}/myid"
# with_indexed_items: "{{ groups.zks }}"
  
- name: config environment variable of zookeeper
  lineinfile:
  path: "{{ env_path }}"
  line: "{{ item.line }}"
  regexp: "{{ item.regexp }}"
  with_items:
  - line: "export ZK_HOME={{ zk_home }}"
    regexp: "^export ZK_HOME="
  - line: "export PATH=$ZK_HOME/bin:{{ path }}"
    regexp: "^export PATH="
    
- name: let environment variable of config file take effect
  shell: source {{ env_path }}
  
- name: start zookeeper
  shell: zkServer.sh start
  tags: start_zk
