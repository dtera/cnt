apiVersion: kubeadm.k8s.io/v1beta1
kind: InitConfiguration
nodeRegistration:
  taints:
{% if inventory_hostname in groups.k8s_master %}
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
{% elif inventory_hostname in groups.k8s_etcd %}
  - effect: NoSchedule
    key: node-role.kubernetes.io/etcd
{% endif %}
  kubeletExtraArgs:
    cgroup-driver: '{{ k8s_cgroup_driver }}'
{% if k8s_cloud_provider != "" %}
    cloud-provider: "{{ k8s_cloud_provider }}"
    cloud-config: "{{ k8s_cloud_config_file }}"
{% endif %}

---

apiVersion: "kubeadm.k8s.io/v1beta1"
kind: ClusterConfiguration
imageRepository: {{ k8s_image_repository }}
useHyperKubeImage: {{ k8s_useHyperKubeImage }}
kubernetesVersion: {{ k8s_master_version }}
certificatesDir: {{ k8s_certs_dir }}
clusterName: {{ k8s_cluster_name }}
dns:
  type: {{ k8s_dns_type }}
etcd:
{% if inventory_hostname in groups.k8s_etcd %}
  local:
    dataDir: {{ k8s_etcd_data_dir }}
    serverCertSANs:
{% for san in k8s_etcd_server_cert_sans %}
    - {{ san }}
{% endfor %}
    peerCertSANs:
{% for san in k8s_etcd_peer_cert_sans %}
    - {{ san }}
{% endfor %}
    extraArgs:
      initial-cluster: {% for n in groups.k8s_etcd %}{{ hostvars[n]['ansible_hostname'] }}=https://{{ n }}:2380{% if not loop.last %},{% endif %}{% endfor %}

      initial-cluster-state: new
      name: {{ ansible_hostname }}
      listen-peer-urls: https://{{ inventory_hostname }}:2380
      listen-client-urls: https://{{ inventory_hostname }}:2379
      advertise-client-urls: https://{{ inventory_hostname }}:2379
      initial-advertise-peer-urls: https://{{ inventory_hostname }}:2380
{% else %}
  external:
    endpoints:
{% for n in groups.k8s_etcd %}
    - "https://{{ hostvars[n]['ansible_host'] | default(hostvars[n]['ansible_default_ipv4']["address"] ) }}:{{ k8s_etcd_client_port }}"
{% endfor %}
    caFile: {{ k8s_etcd_ca_cert_file }}
    certFile: {{ k8s_etcd_apiserver_client_cert_file }}
    keyFile: {{ k8s_etcd_apiserver_client_key_file }}
{% endif %}
{% if inventory_hostname in groups.k8s_master %}
{% if k8s_apiserver_dns != "" %}
- "{{ k8s_apiserver_dns }}"
controlPlaneEndpoint: "{{ k8s_apiserver_dns }}:{{ k8s_apiserver_port}}"
{% else %}
controlPlaneEndpoint: "{{ k8s_apiserver_ip | default(hostvars[groups.k8s_master[0]]['ansible_host'])| default(hostvars[groups.k8s_master[0]]['ansible_default_ipv4']["address"] ) }}:{{ k8s_apiserver_port}}"
{% endif %}
apiServer:
  certSANs:
  - "{{ k8s_apiserver_ip | default(hostvars[groups.k8s_master[0]]['ansible_host']) | default(hostvars[groups.k8s_master[0]]['ansible_default_ipv4']["address"] ) }}"
  extraArgs:
    authorization-mode: {{ k8s_authorization_mode }}
{#    enable-admission-plugins: {{ k8s_enable_admission_plugins }}#}
    audit-log-maxage: "{{ k8s_log_age }}"
    audit-log-path: "{{ k8s_audit_log_dir }}/api-server.log"
{% if k8s_cloud_provider != "" %}
    cloud-provider: "{{ k8s_cloud_provider }}"
    cloud-config: "{{ k8s_cloud_config_file }}"
  extraVolumes:
  - name: cloud
    hostPath: "{{ k8s_cloud_config_file }}"
    mountPath: "{{ k8s_cloud_config_file }}"
controllerManager:
  extraArgs:
    cloud-provider: "{{ k8s_cloud_provider }}"
    cloud-config: "{{ k8s_cloud_config_file }}"
  extraVolumes:
  - name: cloud
    hostPath: "{{ k8s_cloud_config_file }}"
    mountPath: "{{ k8s_cloud_config_file }}"
{% endif %}
networking:
  dnsDomain: {{ k8s_dns_domain }}
  podSubnet: {{ k8s_pod_subnet }}
  serviceSubnet: {{ k8s_service_subnet }}
{% endif %}